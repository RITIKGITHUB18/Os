Assignment 01


var=1
while [ $var -eq 1 ]  
do
        echo "1.Create 2.Insert 3.View 4.Search 5.Update 6.Delete 7.Exit"
        read choice
        case $choice in
        1) touch record.text
        echo "File Created";;
        
        2) echo "REGNO TO INSERT:"
        read regno
        grep $regno record.txt > temp
        if [ -s temp ]
        then
                echo "Duplicate Data Found"
        else 
                read -p "NAME" name
                read -p "CITY" city
                read -p "MOBILE" mobile
                grep -v "$regno" record.txt > new.txt
                mv new.txt record.txt
                echo "$regno $name $city $mobile">>record.txt
                
                fi
                ;;
        
        3) echo "REG NAME CITY MOBILE"
        cat record.txt;;
        
        4) echo "REGNO TO SEARCH:"
        read regno
        grep -w $regno record.txt > temp
        if [ -s temp ]
        then
                cat temp
        else
                echo "No data found with the particular reg no"
        fi;;
        
        5) echo "REGNO TO UPDATE:"
        read regno
        grep $regno record.txt > temp
        if [ -s temp ]
        then
                read -p "NAME" name
                read -p "CITY" city
                read -p "MOBILE" mobile
                grep -v "$regno" record.txt > new.txt
                mv new.txt record.txt
                echo "$regno $name $city $mobile" >> record.txt
                
        else
                echo "No data found with the particular reg no"
        fi;;
        
        6) echo "REGNO TO DELETE:"
        read regno
        grep $regno record.txt > temp
        if [ -s temp ]
        then
                grep -v "$regno" record.txt > new.txt
                mv new.txt record.txt
                echo "record Deleted"
        else
                echo "No data found with particular reg no"
                
        fi;;
        
        7) break;;
        *) ;;
        esac
        echo "Press 1 to continue"
        read var
        done






________________


Assignment-02




#include <bits/stdc++.h>
//#include <unistd.h>//
#include <sys/wait.h>
using namespace std;


void bubbleSort(vector<int> &arr)
{
    int n = arr.size();
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                swap(arr[j], arr[j + 1]);
            }
        }
    }


    cout << "Sorted Array: ";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}


int main()
{
    int n;
    cout << "Enter the value of n: ";
    cin >> n;


    vector<int> arr(n);
    cout << "Enter the array numbers: ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }


    int id = fork();


    if (id == 0)
    { // Child Process
        cout << "\nExecuting Child Process" << endl;
        cout << "Process ID: " << getpid() << endl;
        cout << "Parent ID: " << getppid() << endl;


        cout << "Original Array: ";
        for (int i = 0; i < n; i++)
        {
            cout << arr[i] << " ";
        }
        bubbleSort(arr);
    }
    else if (id > 0)
    { // Parent Process
        wait(NULL);
        cout << "\nExecuting Parent Process" << endl;
        cout << "Process ID: " << getpid() << endl;
        cout << "Child ID: " << id << endl;


        cout << "Original Array: ";
        for (int i = 0; i < n; i++)
        {
            cout << arr[i] << " ";
        }
        bubbleSort(arr);
    }
    else
    {
        cout << "Child Process cannot be created" << endl;
    }
}








// 2b.cpp
#include <bits/stdc++.h>
using namespace std;


int binary_search(int ar[], int start, int end, int key) {
    if (start < end) {
        int mid = (start + end) / 2;
        if (key == ar[mid])
            return mid;
        else if (key < ar[mid])
            return binary_search(ar, start, mid, key);
        else
            return binary_search(ar, mid + 1, end, key);
    }
    if (key < 0 || key > end)
        return -1;
    return -1;
}


int main(int argc, char *argv[]) {
    int arr[20], size = 0, result, key;
    cout << "===== Binary Search by Child Process =====" << endl;
    
    for (int i = 0; argv[i + 1] != 0; i++) {
        arr[i] = atoi(argv[i + 1]);
        size++;
    }


    cout << "Sorted Array:" << endl;
    for (int i = 0; i < size; i++) {
        cout << arr[i] <<" ";
    }
    
    cout << "\nNumber to search: ";
    cin >> key;


    result = binary_search(arr, 0, size, key);


    if (result == -1)
        cout << "Number not Found" << endl;
    else {
        cout << "Element found at " << result + 1 << " location" << endl;
    }


    return 0;
}




________________


Assignment - 03


#include <bits/stdc++.h>
using namespace std;


int main() {
    int arrival_time[10], burst_time[10], temp[10];
    
    int i, smallest, count = 0, time=0, limit;
    
    double wait_time = 0, turnaround_time = 0, end;
    float average_waiting_time, average_turnaround_time;


    cout << "Enter the Total Number of Processes: ";
    cin >> limit;
    cout << "Enter Details of " << limit << " Processes" << endl;


    for (i = 0; i < limit; i++) {
        cout << "Enter Arrival Time: ";
        cin >> arrival_time[i];
        cout << "Enter Burst Time: ";
        cin >> burst_time[i];
        temp[i] = burst_time[i];
    }


    burst_time[9] = 9999;


    while(count != limit) {
        smallest = 9;
        for (i = 0; i < limit; i++) {
            if (arrival_time[i] <= time && burst_time[i] < burst_time[smallest] && burst_time[i] > 0) {
                smallest = i;
            }
        }
        
        while(burst_time[smallest]>0)
        {
            burst_time[smallest]--;
            time++;
        }
        
        if (burst_time[smallest] == 0) {
        cout<<smallest<<" "<<time<<endl;
            count++;
            end = time;
            wait_time = wait_time + end - arrival_time[smallest] - temp[smallest];
            turnaround_time = turnaround_time + end - arrival_time[smallest];
        }
       }
        
        


    average_waiting_time = wait_time / limit;
    average_turnaround_time = turnaround_time / limit;


    cout << "\nAverage Waiting Time: " << average_waiting_time << endl;
    cout << "Average Turnaround Time: " << average_turnaround_time << endl;


    return 0;
}


________________


Assignment-04


#include <iostream>
#include <thread>
#include <mutex>
#include <random>
#include <chrono>
using namespace std;


int buff[10];
mutex m;


void pro(){
    int i;
    while(true){
        m.lock();
        int n = rand()%10;
        buff[i++] = n;
        cout<< n << " Element is added at " << i - 1 << " Location" << endl;
        if(i==10) i = 0;
        m.unlock();
        this_thread::sleep_for(chrono::seconds(2));
    }
}


void cus(){
    int i=0;
    while(true){
        m.lock();
        int key = buff[i++];
        cout << key << " Element is extracted at " << i - 1 << " Location" << endl;
        if(i==10) i = 0;
        m.unlock();
        this_thread::sleep_for(chrono::seconds(2));
    }
}


int main(){
    thread pt(pro);
    thread ct(cus);


    pt.join();
    ct.join();
}\


Assignment-05




#include <bits/stdc++.h>
using namespace std;


int main() {
  int Max[10][10], need[10][10], alloc[10][10], avail[10];
  int p, r, i, j, process, count = 0; 
  int finish[10], safeSequence[10];


  // Input the number of processes
  cout << "Enter the number of processes: ";
  cin >> p;


  // Initialize the 'finish' array to track completed processes
  for (i = 0; i < p; i++) finish[i] = 0;


  // Input the number of resource types
  cout << "Enter the number of resource types: ";
  cin >> r;


  // Input the Max Matrix for each process
  cout << "\nEnter the Max Matrix for each process:\n";
  for (i = 0; i < p; i++) {
    cout << "For process " << i+1 << ": ";
    for (j = 0; j < r; j++) 
      cin >> Max[i][j];
  }


  // Input the allocation matrix for each process
  cout << "\nEnter the allocation matrix for each process:\n";
  for (i = 0; i < p; i++) {
    cout << "For process " << i+1 << ": ";
    for (j = 0; j < r; j++)
      cin >> alloc[i][j]; 
  }


  // Input the available resources
  cout << "\nEnter the available resources:\n";
  for (j = 0; j < r; j++) 
    cin >> avail[j];


  // Calculate the need matrix
  for (i = 0; i < p; i++)
    for (j = 0; j < r; j++)
      need[i][j] = Max[i][j] - alloc[i][j];


  // Banker's Algorithm
  do {
    // Find a process that can be executed
    process = -1;
    for (i = 0; i < p; i++) {
      if (!finish[i]) {
        int safe = 1;
        for (j = 0; j < r; j++) {
          if (need[i][j] > avail[j]) {
            safe = 0;
            break;
          }
        }
        if (safe) {
          process = i; 
          break;
        }
      }
    }


    if (process != -1) {
      cout << "Process " << process+1 << " runs to completion!\n";
      for(int x=0; x<r;x++) cout<<avail[x]<<" ";
      cout<<endl;
      finish[process] = 1;
      
      safeSequence[count] = process + 1;
      count++;
      for (j = 0; j < r; j++) {
        avail[j] += alloc[process][j];
        alloc[process][j] = 0;
        Max[process][j] = 0;   
      }
    }
  }while (count < p && process != -1);


  // Check if system is in safe state
  if (count == p) {
    cout << "\nThe system is in a safe state!\n";
    cout << "Safe Sequence: < ";
    for (i = 0; i < p; i++) 
      cout << safeSequence[i] << " ";
    cout << ">\n";
  }
  else {
    cout << "\nThe system is in an unsafe state!\n";
  }
  
  return 0;
}








________________


Assignment -06


#include <iostream>
using namespace std;


int n, nf;
int in[100];
int p[50];
int hit = 0;
int i, j, k;
int pgfaultcnt = 0;




void getData()
{
    cout << "\nEnter length of page reference sequence:";
    cin >> n;
    cout << "\nEnter the page reference sequence:";
    for (i = 0; i < n; i++)
        cin >> in[i];
    cout << "\nEnter no of frames:";
    cin >> nf;
}




void initialize()
{
    pgfaultcnt = 0;
    for (i = 0; i < nf; i++)
        p[i] = 9999;
}




int isHit(int data)
{
    hit = 0;
    for (j = 0; j < nf; j++)
    {
        if (p[j] == data)
        {
            hit = 1;
            break;
        }
    }


    return hit;
}




int getHitIndex(int data)
{
    int hitind;
    for (k = 0; k < nf; k++)
    {
        if (p[k] == data)
        {
            hitind = k;
            break;
        }
    }
    return hitind;
}






void dispPages()
{
    for (k = 0; k < nf; k++)
    {
        if (p[k] != 9999)
            cout << " " << p[k];
    }
}






void dispPgFaultCnt()
{
    cout << "\nTotal no of page faults:" << pgfaultcnt << endl;
}








void fifo()
{
    initialize();
    for (i = 0; i < n; i++)
    {
        cout << "\nFor " << in[i] << " :";


        if (isHit(in[i]) == 0)
        {


            for (k = 0; k < nf - 1; k++)
                p[k] = p[k + 1];


            p[k] = in[i];
            pgfaultcnt++;
            dispPages();
        }
        else
            cout << "No page fault";
    }
    dispPgFaultCnt();
}






void optimal()
{
    initialize();
    int near[50];
    for (i = 0; i < n; i++)
    {
        cout << "\nFor " << in[i] << " :";


        if (isHit(in[i]) == 0)
        {


            for (j = 0; j < nf; j++)
            {
                int pg = p[j];
                int found = 0;
                
                for (k = i; k < n; k++)
                {
                    if (pg == in[k])
                    {
                        near[j] = k;
                        found = 1;
                        break;
                    }
                    else
                        found = 0;
                }
                if (!found)
                    near[j] = 9999;
            }
            int max = -9999;
            int repindex;
            for (j = 0; j < nf; j++)
            {
                if (near[j] > max)
                {
                    max = near[j];
                    repindex = j;
                }
            }
            p[repindex] = in[i];
            pgfaultcnt++;


            dispPages();
        }
        else
            cout << "No page fault";
    }
    dispPgFaultCnt();
}








void lru()
{
    initialize();


    int least[50];
    for (i = 0; i < n; i++)
    {


        cout << "\nFor " << in[i] << " :";


        if (isHit(in[i]) == 0)
        {


            for (j = 0; j < nf; j++)
            {
                int pg = p[j];
                int found = 0;
                for (k = i - 1; k >= 0; k--)
                {
                    if (pg == in[k])
                    {
                        least[j] = k;
                        found = 1;
                        break;
                    }
                    else
                        found = 0;
                }
                if (!found)
                    least[j] = -9999;
            }
            int min = 9999;
            int repindex;
            for (j = 0; j < nf; j++)
            {
                if (least[j] < min)
                {
                    min = least[j];
                    repindex = j;
                }
            }
            p[repindex] = in[i];
            pgfaultcnt++;


            dispPages();
        }
        else
            cout << "No page fault!";
    }
    dispPgFaultCnt();
}


int main()
{
    int choice;
    while (1)
    {
        cout << "\nPage Replacement Algorithms\n1.Enter data\n2.FIFO\n3.Optimal\n4.LRU\n\n5.Exit\nEnter your choice:";
        cin >> choice;
        switch (choice)
        {
        case 1:
            getData();
            break;
        case 2:
            fifo();
            break;
        case 3:
            optimal();
            break;
        case 4:
            lru();
            break;
        default:
            return 0;
            break;
        }
    }
}








________________


Assignment - 07


#include <bits/stdc++.h>
#include <fcntl.h>
#include <unistd.h>


#define FIFO_PIPE "xyz"


int main() {
    int fd, i, c = 0, w = 0, l = 0;
    char str[100];


    // mkfifo(FIFO_PIPE, 0777);   // mkfifo - create named pipe special file with 777 permission


    fd = open(FIFO_PIPE, O_RDONLY);  // Open a File in Read Only Mode
    read(fd, str, sizeof(str));      // Read file and store into "str" buffer


    printf("\nReceived Data : %s", str);  // Print "str"


    for (i = 0; str[i] != '\0'; i++)  // Calculate the number of lines, words, and characters
    {
        if (str[i] == ' ' || str[i] == '\n')
            w++;
        if (str[i] == '\n')
            l++;
        c++;
    }


    printf("\n No. of characters = %d", c);  // Print the number of lines, words, and characters
    printf("\n No. of lines = %d", l + 1);
    printf("\n No. of words = %d \n", w + 1);


    close(fd);
    return 0;
}




client
#include <bits/stdc++.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>


#define FIFO_PIPE "xyz"


int main() {
    int fd, i = 0;
    char str[200], ch;


    mkfifo(FIFO_PIPE, 0644);


    printf("\n Enter Your message (press @ to terminate) \n");
    while ((ch = fgetc(stdin)) != '@') {
        str[i++] = ch;
    }


    str[i] = '\0';


    fd = open(FIFO_PIPE, O_WRONLY);
    write(fd, str, strlen(str));


    close(fd);


    return 0;
}


________________


Assignment-08




#include <iostream>
#include <cstdlib>
#include <algorithm>


using namespace std; // Add this line


int RQ[100]; int i; int n; int TotalHeadMoment = 0; int initial; int Count = 0; int Size; int Move;


void getData() {
    cout << "Enter the number of Requests" << endl;
    cin >> n;
    cout << "Enter the Requests sequence" << endl;
    for (i = 0; i < n; i++)
        cin >> RQ[i];
    cout << "Enter initial head position" << endl;
    cin >> initial;
}


void sstf() {
    while (Count != n) {
        int min = 1000, d, index;
        for (i = 0; i < n; i++) {
            d = abs(RQ[i] - initial);
            if (min > d) {
                min = d;
                index = i;
            }
        }
        TotalHeadMoment += min;
        initial = RQ[index];
        RQ[index] = 1000;
        Count++;
    }


    cout << "Total head movement is " << TotalHeadMoment << endl;
}




void scan() {
    int Size;
    cout << "Enter total disk Size" << endl;
    cin >> Size;
    cout << "Enter the head movement direction for high 1 and for low 0" << endl;
    cin >> Move;


    sort(RQ, RQ + n);


    int index = lower_bound(RQ, RQ + n, initial) - RQ;


    if (Move == 1) {
        // Move inwards
        for (i = index; i < n; i++) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(Size - RQ[n - 1] - initial);
        initial = Size;
    } else {
        // Move outwards
        for (i = index - 1; i >= 0; i--) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(RQ[0] - initial);
        initial = 0;
    }


    cout << "Total head movement is " << TotalHeadMoment << endl;
}


void clook() {
    int Size;
    cout << "Enter total disk Size" << endl;
    cin >> Size;
    cout << "Enter the head movement direction for high 1 and for low 0" << endl;
    cin >> Move;


    sort(RQ, RQ + n);


    int index = lower_bound(RQ, RQ + n, initial) - RQ;


    if (Move == 1) {
        // Move inwards
        for (i = index; i < n; i++) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(RQ[index] - RQ[0]);
        initial = RQ[0];
    } else {
        // Move outwards
        for (i = index - 1; i >= 0; i--) {
            TotalHeadMoment += abs(RQ[i] - initial);
            initial = RQ[i];
        }
        TotalHeadMoment += abs(RQ[n - 1] - RQ[index]);
        initial = RQ[n - 1];
    }


    cout << "Total head movement is " << TotalHeadMoment << endl;
}


int main() {
    int choice;
    while (true) {
        cout << "\nDisk Scheduling Algorithms" << endl;
        cout << "1. Enter data" << endl;
        cout << "2. SSTF" << endl;
        cout << "3. SCAN" << endl;
        cout << "4. C-LOOK" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;


        switch (choice) {
            case 1:
                getData();
                break;
            case 2:
                sstf();
                break;
            case 3:
                scan();
                break;
            case 4:
                clook();
                break;
            default:
                return 0;
                break;
        }
    }
}